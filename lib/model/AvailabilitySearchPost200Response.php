<?php
/**
 * AvailabilitySearchPost200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for PHP. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * AvailabilitySearchPost200Response Class Doc Comment
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AvailabilitySearchPost200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_availability_search_post_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'language_code' => 'string',
        'list' => '\com.lodgea\com.lodgea.model\AvailablePropertiesInner1[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'language_code' => null,
        'list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language_code' => 'languageCode',
        'list' => 'list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language_code' => 'setLanguageCode',
        'list' => 'setList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language_code' => 'getLanguageCode',
        'list' => 'getList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LANGUAGE_CODE_AF = 'af';
    public const LANGUAGE_CODE_AR = 'ar';
    public const LANGUAGE_CODE_BG = 'bg';
    public const LANGUAGE_CODE_CA = 'ca';
    public const LANGUAGE_CODE_CS = 'cs';
    public const LANGUAGE_CODE_DA = 'da';
    public const LANGUAGE_CODE_DE = 'de';
    public const LANGUAGE_CODE_EL = 'el';
    public const LANGUAGE_CODE_EN = 'en';
    public const LANGUAGE_CODE_ES = 'es';
    public const LANGUAGE_CODE_ET = 'et';
    public const LANGUAGE_CODE_FI = 'fi';
    public const LANGUAGE_CODE_FR = 'fr';
    public const LANGUAGE_CODE_HE = 'he';
    public const LANGUAGE_CODE_HI = 'hi';
    public const LANGUAGE_CODE_HR = 'hr';
    public const LANGUAGE_CODE_HU = 'hu';
    public const LANGUAGE_CODE_ID = 'id';
    public const LANGUAGE_CODE_IS = 'is';
    public const LANGUAGE_CODE_IT = 'it';
    public const LANGUAGE_CODE_JA = 'ja';
    public const LANGUAGE_CODE_KO = 'ko';
    public const LANGUAGE_CODE_LT = 'lt';
    public const LANGUAGE_CODE_LV = 'lv';
    public const LANGUAGE_CODE_NL = 'nl';
    public const LANGUAGE_CODE_NO = 'no';
    public const LANGUAGE_CODE_PL = 'pl';
    public const LANGUAGE_CODE_PT = 'pt';
    public const LANGUAGE_CODE_RO = 'ro';
    public const LANGUAGE_CODE_RU = 'ru';
    public const LANGUAGE_CODE_SK = 'sk';
    public const LANGUAGE_CODE_SL = 'sl';
    public const LANGUAGE_CODE_SR = 'sr';
    public const LANGUAGE_CODE_SV = 'sv';
    public const LANGUAGE_CODE_TH = 'th';
    public const LANGUAGE_CODE_TR = 'tr';
    public const LANGUAGE_CODE_VI = 'vi';
    public const LANGUAGE_CODE_ZH = 'zh';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageCodeAllowableValues()
    {
        return [
            self::LANGUAGE_CODE_AF,
            self::LANGUAGE_CODE_AR,
            self::LANGUAGE_CODE_BG,
            self::LANGUAGE_CODE_CA,
            self::LANGUAGE_CODE_CS,
            self::LANGUAGE_CODE_DA,
            self::LANGUAGE_CODE_DE,
            self::LANGUAGE_CODE_EL,
            self::LANGUAGE_CODE_EN,
            self::LANGUAGE_CODE_ES,
            self::LANGUAGE_CODE_ET,
            self::LANGUAGE_CODE_FI,
            self::LANGUAGE_CODE_FR,
            self::LANGUAGE_CODE_HE,
            self::LANGUAGE_CODE_HI,
            self::LANGUAGE_CODE_HR,
            self::LANGUAGE_CODE_HU,
            self::LANGUAGE_CODE_ID,
            self::LANGUAGE_CODE_IS,
            self::LANGUAGE_CODE_IT,
            self::LANGUAGE_CODE_JA,
            self::LANGUAGE_CODE_KO,
            self::LANGUAGE_CODE_LT,
            self::LANGUAGE_CODE_LV,
            self::LANGUAGE_CODE_NL,
            self::LANGUAGE_CODE_NO,
            self::LANGUAGE_CODE_PL,
            self::LANGUAGE_CODE_PT,
            self::LANGUAGE_CODE_RO,
            self::LANGUAGE_CODE_RU,
            self::LANGUAGE_CODE_SK,
            self::LANGUAGE_CODE_SL,
            self::LANGUAGE_CODE_SR,
            self::LANGUAGE_CODE_SV,
            self::LANGUAGE_CODE_TH,
            self::LANGUAGE_CODE_TR,
            self::LANGUAGE_CODE_VI,
            self::LANGUAGE_CODE_ZH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language_code'] = $data['language_code'] ?? null;
        $this->container['list'] = $data['list'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['language_code'] === null) {
            $invalidProperties[] = "'language_code' can't be null";
        }
        $allowedValues = $this->getLanguageCodeAllowableValues();
        if (!is_null($this->container['language_code']) && !in_array($this->container['language_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language_code', must be one of '%s'",
                $this->container['language_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['list'] === null) {
            $invalidProperties[] = "'list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code The language code of the language in which the descriptive texts for each found property are returned.<p>Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.</p><p>See also <a href=\"#isolanguage-codes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        $allowedValues = $this->getLanguageCodeAllowableValues();
        if (!in_array($language_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language_code', must be one of '%s'",
                    $language_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets list
     *
     * @return \com.lodgea\com.lodgea.model\AvailablePropertiesInner1[]
     */
    public function getList()
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param \com.lodgea\com.lodgea.model\AvailablePropertiesInner1[] $list A list of available properties matching the given criteria.
     *
     * @return self
     */
    public function setList($list)
    {
        $this->container['list'] = $list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


