<?php
/**
 * InlineResponse2001AttractionList
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for php. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * InlineResponse2001AttractionList Class Doc Comment
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2001AttractionList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_1_attractionList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type_code' => 'float',
        'name' => 'string',
        'distance' => '\com.lodgea\com.lodgea.model\InlineResponse2001Distance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type_code' => null,
        'name' => null,
        'distance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_code' => 'typeCode',
        'name' => 'name',
        'distance' => 'distance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_code' => 'setTypeCode',
        'name' => 'setName',
        'distance' => 'setDistance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_code' => 'getTypeCode',
        'name' => 'getName',
        'distance' => 'getDistance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CODE_1 = 1;
    const TYPE_CODE_2 = 2;
    const TYPE_CODE_3 = 3;
    const TYPE_CODE_4 = 4;
    const TYPE_CODE_5 = 5;
    const TYPE_CODE_6 = 6;
    const TYPE_CODE_7 = 7;
    const TYPE_CODE_8 = 8;
    const TYPE_CODE_9 = 9;
    const TYPE_CODE_10 = 10;
    const TYPE_CODE_11 = 11;
    const TYPE_CODE_12 = 12;
    const TYPE_CODE_13 = 13;
    const TYPE_CODE_14 = 14;
    const TYPE_CODE_15 = 15;
    const TYPE_CODE_16 = 16;
    const TYPE_CODE_17 = 17;
    const TYPE_CODE_18 = 18;
    const TYPE_CODE_19 = 19;
    const TYPE_CODE_20 = 20;
    const TYPE_CODE_21 = 21;
    const TYPE_CODE_22 = 22;
    const TYPE_CODE_23 = 23;
    const TYPE_CODE_24 = 24;
    const TYPE_CODE_25 = 25;
    const TYPE_CODE_26 = 26;
    const TYPE_CODE_27 = 27;
    const TYPE_CODE_28 = 28;
    const TYPE_CODE_29 = 29;
    const TYPE_CODE_30 = 30;
    const TYPE_CODE_31 = 31;
    const TYPE_CODE_32 = 32;
    const TYPE_CODE_33 = 33;
    const TYPE_CODE_34 = 34;
    const TYPE_CODE_35 = 35;
    const TYPE_CODE_36 = 36;
    const TYPE_CODE_37 = 37;
    const TYPE_CODE_38 = 38;
    const TYPE_CODE_39 = 39;
    const TYPE_CODE_40 = 40;
    const TYPE_CODE_41 = 41;
    const TYPE_CODE_42 = 42;
    const TYPE_CODE_43 = 43;
    const TYPE_CODE_44 = 44;
    const TYPE_CODE_45 = 45;
    const TYPE_CODE_46 = 46;
    const TYPE_CODE_47 = 47;
    const TYPE_CODE_48 = 48;
    const TYPE_CODE_49 = 49;
    const TYPE_CODE_50 = 50;
    const TYPE_CODE_51 = 51;
    const TYPE_CODE_52 = 52;
    const TYPE_CODE_53 = 53;
    const TYPE_CODE_54 = 54;
    const TYPE_CODE_55 = 55;
    const TYPE_CODE_56 = 56;
    const TYPE_CODE_57 = 57;
    const TYPE_CODE_58 = 58;
    const TYPE_CODE_59 = 59;
    const TYPE_CODE_60 = 60;
    const TYPE_CODE_61 = 61;
    const TYPE_CODE_62 = 62;
    const TYPE_CODE_63 = 63;
    const TYPE_CODE_64 = 64;
    const TYPE_CODE_65 = 65;
    const TYPE_CODE_66 = 66;
    const TYPE_CODE_67 = 67;
    const TYPE_CODE_68 = 68;
    const TYPE_CODE_69 = 69;
    const TYPE_CODE_70 = 70;
    const TYPE_CODE_71 = 71;
    const TYPE_CODE_72 = 72;
    const TYPE_CODE_73 = 73;
    const TYPE_CODE_74 = 74;
    const TYPE_CODE_75 = 75;
    const TYPE_CODE_76 = 76;
    const TYPE_CODE_77 = 77;
    const TYPE_CODE_78 = 78;
    const TYPE_CODE_79 = 79;
    const TYPE_CODE_80 = 80;
    const TYPE_CODE_81 = 81;
    const TYPE_CODE_82 = 82;
    const TYPE_CODE_83 = 83;
    const TYPE_CODE_84 = 84;
    const TYPE_CODE_85 = 85;
    const TYPE_CODE_86 = 86;
    const TYPE_CODE_87 = 87;
    const TYPE_CODE_88 = 88;
    const TYPE_CODE_89 = 89;
    const TYPE_CODE_90 = 90;
    const TYPE_CODE_91 = 91;
    const TYPE_CODE_92 = 92;
    const TYPE_CODE_93 = 93;
    const TYPE_CODE_94 = 94;
    const TYPE_CODE_95 = 95;
    const TYPE_CODE_96 = 96;
    const TYPE_CODE_97 = 97;
    const TYPE_CODE_98 = 98;
    const TYPE_CODE_99 = 99;
    const TYPE_CODE_100 = 100;
    const TYPE_CODE_101 = 101;
    const TYPE_CODE_102 = 102;
    const TYPE_CODE_103 = 103;
    const TYPE_CODE_104 = 104;
    const TYPE_CODE_105 = 105;
    const TYPE_CODE_106 = 106;
    const TYPE_CODE_107 = 107;
    const TYPE_CODE_108 = 108;
    const TYPE_CODE_109 = 109;
    const TYPE_CODE_110 = 110;
    const TYPE_CODE_90001 = 90001;
    const TYPE_CODE_90002 = 90002;
    const TYPE_CODE_90003 = 90003;
    const TYPE_CODE_90004 = 90004;
    const TYPE_CODE_90005 = 90005;
    const TYPE_CODE_90006 = 90006;
    const TYPE_CODE_90007 = 90007;
    const TYPE_CODE_90008 = 90008;
    const TYPE_CODE_90009 = 90009;
    const TYPE_CODE_90010 = 90010;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeCodeAllowableValues()
    {
        return [
            self::TYPE_CODE_1,
            self::TYPE_CODE_2,
            self::TYPE_CODE_3,
            self::TYPE_CODE_4,
            self::TYPE_CODE_5,
            self::TYPE_CODE_6,
            self::TYPE_CODE_7,
            self::TYPE_CODE_8,
            self::TYPE_CODE_9,
            self::TYPE_CODE_10,
            self::TYPE_CODE_11,
            self::TYPE_CODE_12,
            self::TYPE_CODE_13,
            self::TYPE_CODE_14,
            self::TYPE_CODE_15,
            self::TYPE_CODE_16,
            self::TYPE_CODE_17,
            self::TYPE_CODE_18,
            self::TYPE_CODE_19,
            self::TYPE_CODE_20,
            self::TYPE_CODE_21,
            self::TYPE_CODE_22,
            self::TYPE_CODE_23,
            self::TYPE_CODE_24,
            self::TYPE_CODE_25,
            self::TYPE_CODE_26,
            self::TYPE_CODE_27,
            self::TYPE_CODE_28,
            self::TYPE_CODE_29,
            self::TYPE_CODE_30,
            self::TYPE_CODE_31,
            self::TYPE_CODE_32,
            self::TYPE_CODE_33,
            self::TYPE_CODE_34,
            self::TYPE_CODE_35,
            self::TYPE_CODE_36,
            self::TYPE_CODE_37,
            self::TYPE_CODE_38,
            self::TYPE_CODE_39,
            self::TYPE_CODE_40,
            self::TYPE_CODE_41,
            self::TYPE_CODE_42,
            self::TYPE_CODE_43,
            self::TYPE_CODE_44,
            self::TYPE_CODE_45,
            self::TYPE_CODE_46,
            self::TYPE_CODE_47,
            self::TYPE_CODE_48,
            self::TYPE_CODE_49,
            self::TYPE_CODE_50,
            self::TYPE_CODE_51,
            self::TYPE_CODE_52,
            self::TYPE_CODE_53,
            self::TYPE_CODE_54,
            self::TYPE_CODE_55,
            self::TYPE_CODE_56,
            self::TYPE_CODE_57,
            self::TYPE_CODE_58,
            self::TYPE_CODE_59,
            self::TYPE_CODE_60,
            self::TYPE_CODE_61,
            self::TYPE_CODE_62,
            self::TYPE_CODE_63,
            self::TYPE_CODE_64,
            self::TYPE_CODE_65,
            self::TYPE_CODE_66,
            self::TYPE_CODE_67,
            self::TYPE_CODE_68,
            self::TYPE_CODE_69,
            self::TYPE_CODE_70,
            self::TYPE_CODE_71,
            self::TYPE_CODE_72,
            self::TYPE_CODE_73,
            self::TYPE_CODE_74,
            self::TYPE_CODE_75,
            self::TYPE_CODE_76,
            self::TYPE_CODE_77,
            self::TYPE_CODE_78,
            self::TYPE_CODE_79,
            self::TYPE_CODE_80,
            self::TYPE_CODE_81,
            self::TYPE_CODE_82,
            self::TYPE_CODE_83,
            self::TYPE_CODE_84,
            self::TYPE_CODE_85,
            self::TYPE_CODE_86,
            self::TYPE_CODE_87,
            self::TYPE_CODE_88,
            self::TYPE_CODE_89,
            self::TYPE_CODE_90,
            self::TYPE_CODE_91,
            self::TYPE_CODE_92,
            self::TYPE_CODE_93,
            self::TYPE_CODE_94,
            self::TYPE_CODE_95,
            self::TYPE_CODE_96,
            self::TYPE_CODE_97,
            self::TYPE_CODE_98,
            self::TYPE_CODE_99,
            self::TYPE_CODE_100,
            self::TYPE_CODE_101,
            self::TYPE_CODE_102,
            self::TYPE_CODE_103,
            self::TYPE_CODE_104,
            self::TYPE_CODE_105,
            self::TYPE_CODE_106,
            self::TYPE_CODE_107,
            self::TYPE_CODE_108,
            self::TYPE_CODE_109,
            self::TYPE_CODE_110,
            self::TYPE_CODE_90001,
            self::TYPE_CODE_90002,
            self::TYPE_CODE_90003,
            self::TYPE_CODE_90004,
            self::TYPE_CODE_90005,
            self::TYPE_CODE_90006,
            self::TYPE_CODE_90007,
            self::TYPE_CODE_90008,
            self::TYPE_CODE_90009,
            self::TYPE_CODE_90010,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type_code'] = $data['type_code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type_code'] === null) {
            $invalidProperties[] = "'type_code' can't be null";
        }
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!is_null($this->container['type_code']) && !in_array($this->container['type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type_code', must be one of '%s'",
                $this->container['type_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_code
     *
     * @return float
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param float $type_code The code for this attraction type.<p>See also <a href=\"#attractioncategory-codes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setTypeCode($type_code)
    {
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!in_array($type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type_code', must be one of '%s'",
                    $type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the attraction. Names are proper nouns and therefore not affected by the given language code.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return \com.lodgea\com.lodgea.model\InlineResponse2001Distance
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param \com.lodgea\com.lodgea.model\InlineResponse2001Distance $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


