<?php
/**
 * InlineResponse2001MediaList
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for php. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * InlineResponse2001MediaList Class Doc Comment
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2001MediaList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_1_mediaList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tag_list' => 'float[]',
        'is_main_image' => 'bool',
        'url' => 'string',
        'sort_order' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tag_list' => null,
        'is_main_image' => null,
        'url' => null,
        'sort_order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tag_list' => 'tagList',
        'is_main_image' => 'isMainImage',
        'url' => 'url',
        'sort_order' => 'sortOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tag_list' => 'setTagList',
        'is_main_image' => 'setIsMainImage',
        'url' => 'setUrl',
        'sort_order' => 'setSortOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tag_list' => 'getTagList',
        'is_main_image' => 'getIsMainImage',
        'url' => 'getUrl',
        'sort_order' => 'getSortOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TAG_LIST_1 = 1;
    const TAG_LIST_2 = 2;
    const TAG_LIST_3 = 3;
    const TAG_LIST_4 = 4;
    const TAG_LIST_5 = 5;
    const TAG_LIST_6 = 6;
    const TAG_LIST_7 = 7;
    const TAG_LIST_8 = 8;
    const TAG_LIST_10 = 10;
    const TAG_LIST_11 = 11;
    const TAG_LIST_13 = 13;
    const TAG_LIST_14 = 14;
    const TAG_LIST_37 = 37;
    const TAG_LIST_41 = 41;
    const TAG_LIST_42 = 42;
    const TAG_LIST_43 = 43;
    const TAG_LIST_50 = 50;
    const TAG_LIST_55 = 55;
    const TAG_LIST_61 = 61;
    const TAG_LIST_70 = 70;
    const TAG_LIST_74 = 74;
    const TAG_LIST_81 = 81;
    const TAG_LIST_82 = 82;
    const TAG_LIST_87 = 87;
    const TAG_LIST_89 = 89;
    const TAG_LIST_90 = 90;
    const TAG_LIST_94 = 94;
    const TAG_LIST_95 = 95;
    const TAG_LIST_96 = 96;
    const TAG_LIST_97 = 97;
    const TAG_LIST_100 = 100;
    const TAG_LIST_102 = 102;
    const TAG_LIST_103 = 103;
    const TAG_LIST_104 = 104;
    const TAG_LIST_106 = 106;
    const TAG_LIST_107 = 107;
    const TAG_LIST_108 = 108;
    const TAG_LIST_112 = 112;
    const TAG_LIST_113 = 113;
    const TAG_LIST_114 = 114;
    const TAG_LIST_115 = 115;
    const TAG_LIST_116 = 116;
    const TAG_LIST_124 = 124;
    const TAG_LIST_125 = 125;
    const TAG_LIST_128 = 128;
    const TAG_LIST_131 = 131;
    const TAG_LIST_133 = 133;
    const TAG_LIST_134 = 134;
    const TAG_LIST_137 = 137;
    const TAG_LIST_141 = 141;
    const TAG_LIST_143 = 143;
    const TAG_LIST_153 = 153;
    const TAG_LIST_154 = 154;
    const TAG_LIST_155 = 155;
    const TAG_LIST_156 = 156;
    const TAG_LIST_157 = 157;
    const TAG_LIST_158 = 158;
    const TAG_LIST_159 = 159;
    const TAG_LIST_160 = 160;
    const TAG_LIST_161 = 161;
    const TAG_LIST_164 = 164;
    const TAG_LIST_165 = 165;
    const TAG_LIST_167 = 167;
    const TAG_LIST_172 = 172;
    const TAG_LIST_173 = 173;
    const TAG_LIST_177 = 177;
    const TAG_LIST_178 = 178;
    const TAG_LIST_179 = 179;
    const TAG_LIST_182 = 182;
    const TAG_LIST_183 = 183;
    const TAG_LIST_184 = 184;
    const TAG_LIST_185 = 185;
    const TAG_LIST_186 = 186;
    const TAG_LIST_187 = 187;
    const TAG_LIST_188 = 188;
    const TAG_LIST_189 = 189;
    const TAG_LIST_190 = 190;
    const TAG_LIST_191 = 191;
    const TAG_LIST_192 = 192;
    const TAG_LIST_193 = 193;
    const TAG_LIST_194 = 194;
    const TAG_LIST_197 = 197;
    const TAG_LIST_198 = 198;
    const TAG_LIST_199 = 199;
    const TAG_LIST_204 = 204;
    const TAG_LIST_205 = 205;
    const TAG_LIST_240 = 240;
    const TAG_LIST_241 = 241;
    const TAG_LIST_242 = 242;
    const TAG_LIST_245 = 245;
    const TAG_LIST_246 = 246;
    const TAG_LIST_247 = 247;
    const TAG_LIST_248 = 248;
    const TAG_LIST_249 = 249;
    const TAG_LIST_250 = 250;
    const TAG_LIST_251 = 251;
    const TAG_LIST_252 = 252;
    const TAG_LIST_253 = 253;
    const TAG_LIST_254 = 254;
    const TAG_LIST_255 = 255;
    const TAG_LIST_256 = 256;
    const TAG_LIST_257 = 257;
    const TAG_LIST_258 = 258;
    const TAG_LIST_259 = 259;
    const TAG_LIST_260 = 260;
    const TAG_LIST_261 = 261;
    const TAG_LIST_262 = 262;
    const TAG_LIST_263 = 263;
    const TAG_LIST_264 = 264;
    const TAG_LIST_265 = 265;
    const TAG_LIST_266 = 266;
    const TAG_LIST_267 = 267;
    const TAG_LIST_268 = 268;
    const TAG_LIST_269 = 269;
    const TAG_LIST_270 = 270;
    const TAG_LIST_271 = 271;
    const TAG_LIST_272 = 272;
    const TAG_LIST_273 = 273;
    const TAG_LIST_276 = 276;
    const TAG_LIST_277 = 277;
    const TAG_LIST_278 = 278;
    const TAG_LIST_279 = 279;
    const TAG_LIST_280 = 280;
    const TAG_LIST_281 = 281;
    const TAG_LIST_282 = 282;
    const TAG_LIST_283 = 283;
    const TAG_LIST_284 = 284;
    const TAG_LIST_285 = 285;
    const TAG_LIST_286 = 286;
    const TAG_LIST_287 = 287;
    const TAG_LIST_289 = 289;
    const TAG_LIST_290 = 290;
    const TAG_LIST_291 = 291;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTagListAllowableValues()
    {
        return [
            self::TAG_LIST_1,
            self::TAG_LIST_2,
            self::TAG_LIST_3,
            self::TAG_LIST_4,
            self::TAG_LIST_5,
            self::TAG_LIST_6,
            self::TAG_LIST_7,
            self::TAG_LIST_8,
            self::TAG_LIST_10,
            self::TAG_LIST_11,
            self::TAG_LIST_13,
            self::TAG_LIST_14,
            self::TAG_LIST_37,
            self::TAG_LIST_41,
            self::TAG_LIST_42,
            self::TAG_LIST_43,
            self::TAG_LIST_50,
            self::TAG_LIST_55,
            self::TAG_LIST_61,
            self::TAG_LIST_70,
            self::TAG_LIST_74,
            self::TAG_LIST_81,
            self::TAG_LIST_82,
            self::TAG_LIST_87,
            self::TAG_LIST_89,
            self::TAG_LIST_90,
            self::TAG_LIST_94,
            self::TAG_LIST_95,
            self::TAG_LIST_96,
            self::TAG_LIST_97,
            self::TAG_LIST_100,
            self::TAG_LIST_102,
            self::TAG_LIST_103,
            self::TAG_LIST_104,
            self::TAG_LIST_106,
            self::TAG_LIST_107,
            self::TAG_LIST_108,
            self::TAG_LIST_112,
            self::TAG_LIST_113,
            self::TAG_LIST_114,
            self::TAG_LIST_115,
            self::TAG_LIST_116,
            self::TAG_LIST_124,
            self::TAG_LIST_125,
            self::TAG_LIST_128,
            self::TAG_LIST_131,
            self::TAG_LIST_133,
            self::TAG_LIST_134,
            self::TAG_LIST_137,
            self::TAG_LIST_141,
            self::TAG_LIST_143,
            self::TAG_LIST_153,
            self::TAG_LIST_154,
            self::TAG_LIST_155,
            self::TAG_LIST_156,
            self::TAG_LIST_157,
            self::TAG_LIST_158,
            self::TAG_LIST_159,
            self::TAG_LIST_160,
            self::TAG_LIST_161,
            self::TAG_LIST_164,
            self::TAG_LIST_165,
            self::TAG_LIST_167,
            self::TAG_LIST_172,
            self::TAG_LIST_173,
            self::TAG_LIST_177,
            self::TAG_LIST_178,
            self::TAG_LIST_179,
            self::TAG_LIST_182,
            self::TAG_LIST_183,
            self::TAG_LIST_184,
            self::TAG_LIST_185,
            self::TAG_LIST_186,
            self::TAG_LIST_187,
            self::TAG_LIST_188,
            self::TAG_LIST_189,
            self::TAG_LIST_190,
            self::TAG_LIST_191,
            self::TAG_LIST_192,
            self::TAG_LIST_193,
            self::TAG_LIST_194,
            self::TAG_LIST_197,
            self::TAG_LIST_198,
            self::TAG_LIST_199,
            self::TAG_LIST_204,
            self::TAG_LIST_205,
            self::TAG_LIST_240,
            self::TAG_LIST_241,
            self::TAG_LIST_242,
            self::TAG_LIST_245,
            self::TAG_LIST_246,
            self::TAG_LIST_247,
            self::TAG_LIST_248,
            self::TAG_LIST_249,
            self::TAG_LIST_250,
            self::TAG_LIST_251,
            self::TAG_LIST_252,
            self::TAG_LIST_253,
            self::TAG_LIST_254,
            self::TAG_LIST_255,
            self::TAG_LIST_256,
            self::TAG_LIST_257,
            self::TAG_LIST_258,
            self::TAG_LIST_259,
            self::TAG_LIST_260,
            self::TAG_LIST_261,
            self::TAG_LIST_262,
            self::TAG_LIST_263,
            self::TAG_LIST_264,
            self::TAG_LIST_265,
            self::TAG_LIST_266,
            self::TAG_LIST_267,
            self::TAG_LIST_268,
            self::TAG_LIST_269,
            self::TAG_LIST_270,
            self::TAG_LIST_271,
            self::TAG_LIST_272,
            self::TAG_LIST_273,
            self::TAG_LIST_276,
            self::TAG_LIST_277,
            self::TAG_LIST_278,
            self::TAG_LIST_279,
            self::TAG_LIST_280,
            self::TAG_LIST_281,
            self::TAG_LIST_282,
            self::TAG_LIST_283,
            self::TAG_LIST_284,
            self::TAG_LIST_285,
            self::TAG_LIST_286,
            self::TAG_LIST_287,
            self::TAG_LIST_289,
            self::TAG_LIST_290,
            self::TAG_LIST_291,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag_list'] = $data['tag_list'] ?? null;
        $this->container['is_main_image'] = $data['is_main_image'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['sort_order'] = $data['sort_order'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tag_list'] === null) {
            $invalidProperties[] = "'tag_list' can't be null";
        }
        if ($this->container['is_main_image'] === null) {
            $invalidProperties[] = "'is_main_image' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['sort_order'] === null) {
            $invalidProperties[] = "'sort_order' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tag_list
     *
     * @return float[]
     */
    public function getTagList()
    {
        return $this->container['tag_list'];
    }

    /**
     * Sets tag_list
     *
     * @param float[] $tag_list A list of tag codes for the media.<p>See also <a href=\"#imagetype-codes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setTagList($tag_list)
    {
        $allowedValues = $this->getTagListAllowableValues();
        if (array_diff($tag_list, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tag_list', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tag_list'] = $tag_list;

        return $this;
    }

    /**
     * Gets is_main_image
     *
     * @return bool
     */
    public function getIsMainImage()
    {
        return $this->container['is_main_image'];
    }

    /**
     * Sets is_main_image
     *
     * @param bool $is_main_image Whether the media is the main image for the property.
     *
     * @return self
     */
    public function setIsMainImage($is_main_image)
    {
        $this->container['is_main_image'] = $is_main_image;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL for the media.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return float
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param float $sort_order The sort order for the media.
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


