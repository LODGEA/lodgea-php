<?php
/**
 * InlineResponse2003PropertyFacilityInfoAmenityList
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for php. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * InlineResponse2003PropertyFacilityInfoAmenityList Class Doc Comment
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2003PropertyFacilityInfoAmenityList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_3_property_facilityInfo_amenityList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'float',
        'quantity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'quantity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'quantity' => 'quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'quantity' => 'getQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CODE_1 = 1;
    const CODE_2 = 2;
    const CODE_3 = 3;
    const CODE_4 = 4;
    const CODE_5 = 5;
    const CODE_6 = 6;
    const CODE_7 = 7;
    const CODE_8 = 8;
    const CODE_9 = 9;
    const CODE_10 = 10;
    const CODE_11 = 11;
    const CODE_12 = 12;
    const CODE_13 = 13;
    const CODE_14 = 14;
    const CODE_15 = 15;
    const CODE_16 = 16;
    const CODE_17 = 17;
    const CODE_18 = 18;
    const CODE_19 = 19;
    const CODE_20 = 20;
    const CODE_21 = 21;
    const CODE_22 = 22;
    const CODE_23 = 23;
    const CODE_24 = 24;
    const CODE_25 = 25;
    const CODE_26 = 26;
    const CODE_27 = 27;
    const CODE_28 = 28;
    const CODE_29 = 29;
    const CODE_30 = 30;
    const CODE_31 = 31;
    const CODE_32 = 32;
    const CODE_33 = 33;
    const CODE_34 = 34;
    const CODE_35 = 35;
    const CODE_36 = 36;
    const CODE_37 = 37;
    const CODE_38 = 38;
    const CODE_39 = 39;
    const CODE_40 = 40;
    const CODE_41 = 41;
    const CODE_42 = 42;
    const CODE_43 = 43;
    const CODE_44 = 44;
    const CODE_45 = 45;
    const CODE_46 = 46;
    const CODE_47 = 47;
    const CODE_48 = 48;
    const CODE_49 = 49;
    const CODE_50 = 50;
    const CODE_51 = 51;
    const CODE_52 = 52;
    const CODE_53 = 53;
    const CODE_54 = 54;
    const CODE_55 = 55;
    const CODE_56 = 56;
    const CODE_57 = 57;
    const CODE_58 = 58;
    const CODE_59 = 59;
    const CODE_60 = 60;
    const CODE_61 = 61;
    const CODE_62 = 62;
    const CODE_63 = 63;
    const CODE_64 = 64;
    const CODE_65 = 65;
    const CODE_66 = 66;
    const CODE_67 = 67;
    const CODE_68 = 68;
    const CODE_69 = 69;
    const CODE_70 = 70;
    const CODE_71 = 71;
    const CODE_72 = 72;
    const CODE_73 = 73;
    const CODE_74 = 74;
    const CODE_75 = 75;
    const CODE_76 = 76;
    const CODE_77 = 77;
    const CODE_78 = 78;
    const CODE_79 = 79;
    const CODE_80 = 80;
    const CODE_81 = 81;
    const CODE_82 = 82;
    const CODE_83 = 83;
    const CODE_84 = 84;
    const CODE_85 = 85;
    const CODE_86 = 86;
    const CODE_87 = 87;
    const CODE_88 = 88;
    const CODE_89 = 89;
    const CODE_90 = 90;
    const CODE_91 = 91;
    const CODE_92 = 92;
    const CODE_93 = 93;
    const CODE_94 = 94;
    const CODE_95 = 95;
    const CODE_96 = 96;
    const CODE_97 = 97;
    const CODE_98 = 98;
    const CODE_99 = 99;
    const CODE_100 = 100;
    const CODE_101 = 101;
    const CODE_102 = 102;
    const CODE_103 = 103;
    const CODE_104 = 104;
    const CODE_105 = 105;
    const CODE_106 = 106;
    const CODE_107 = 107;
    const CODE_108 = 108;
    const CODE_109 = 109;
    const CODE_110 = 110;
    const CODE_111 = 111;
    const CODE_112 = 112;
    const CODE_113 = 113;
    const CODE_114 = 114;
    const CODE_115 = 115;
    const CODE_116 = 116;
    const CODE_117 = 117;
    const CODE_118 = 118;
    const CODE_119 = 119;
    const CODE_120 = 120;
    const CODE_121 = 121;
    const CODE_122 = 122;
    const CODE_123 = 123;
    const CODE_124 = 124;
    const CODE_125 = 125;
    const CODE_126 = 126;
    const CODE_127 = 127;
    const CODE_128 = 128;
    const CODE_129 = 129;
    const CODE_130 = 130;
    const CODE_131 = 131;
    const CODE_132 = 132;
    const CODE_133 = 133;
    const CODE_134 = 134;
    const CODE_135 = 135;
    const CODE_136 = 136;
    const CODE_137 = 137;
    const CODE_138 = 138;
    const CODE_139 = 139;
    const CODE_140 = 140;
    const CODE_141 = 141;
    const CODE_142 = 142;
    const CODE_143 = 143;
    const CODE_144 = 144;
    const CODE_145 = 145;
    const CODE_146 = 146;
    const CODE_147 = 147;
    const CODE_148 = 148;
    const CODE_149 = 149;
    const CODE_150 = 150;
    const CODE_151 = 151;
    const CODE_152 = 152;
    const CODE_153 = 153;
    const CODE_154 = 154;
    const CODE_155 = 155;
    const CODE_156 = 156;
    const CODE_157 = 157;
    const CODE_158 = 158;
    const CODE_159 = 159;
    const CODE_160 = 160;
    const CODE_161 = 161;
    const CODE_162 = 162;
    const CODE_163 = 163;
    const CODE_164 = 164;
    const CODE_165 = 165;
    const CODE_166 = 166;
    const CODE_167 = 167;
    const CODE_168 = 168;
    const CODE_169 = 169;
    const CODE_170 = 170;
    const CODE_171 = 171;
    const CODE_172 = 172;
    const CODE_173 = 173;
    const CODE_174 = 174;
    const CODE_175 = 175;
    const CODE_176 = 176;
    const CODE_177 = 177;
    const CODE_178 = 178;
    const CODE_179 = 179;
    const CODE_180 = 180;
    const CODE_181 = 181;
    const CODE_182 = 182;
    const CODE_183 = 183;
    const CODE_184 = 184;
    const CODE_185 = 185;
    const CODE_186 = 186;
    const CODE_187 = 187;
    const CODE_188 = 188;
    const CODE_189 = 189;
    const CODE_190 = 190;
    const CODE_191 = 191;
    const CODE_192 = 192;
    const CODE_193 = 193;
    const CODE_194 = 194;
    const CODE_195 = 195;
    const CODE_196 = 196;
    const CODE_197 = 197;
    const CODE_198 = 198;
    const CODE_199 = 199;
    const CODE_200 = 200;
    const CODE_201 = 201;
    const CODE_202 = 202;
    const CODE_203 = 203;
    const CODE_204 = 204;
    const CODE_205 = 205;
    const CODE_206 = 206;
    const CODE_207 = 207;
    const CODE_208 = 208;
    const CODE_209 = 209;
    const CODE_210 = 210;
    const CODE_211 = 211;
    const CODE_212 = 212;
    const CODE_213 = 213;
    const CODE_214 = 214;
    const CODE_215 = 215;
    const CODE_216 = 216;
    const CODE_217 = 217;
    const CODE_218 = 218;
    const CODE_219 = 219;
    const CODE_220 = 220;
    const CODE_221 = 221;
    const CODE_222 = 222;
    const CODE_223 = 223;
    const CODE_224 = 224;
    const CODE_225 = 225;
    const CODE_226 = 226;
    const CODE_227 = 227;
    const CODE_228 = 228;
    const CODE_229 = 229;
    const CODE_230 = 230;
    const CODE_231 = 231;
    const CODE_232 = 232;
    const CODE_233 = 233;
    const CODE_234 = 234;
    const CODE_235 = 235;
    const CODE_236 = 236;
    const CODE_237 = 237;
    const CODE_238 = 238;
    const CODE_239 = 239;
    const CODE_240 = 240;
    const CODE_241 = 241;
    const CODE_242 = 242;
    const CODE_243 = 243;
    const CODE_244 = 244;
    const CODE_245 = 245;
    const CODE_246 = 246;
    const CODE_247 = 247;
    const CODE_248 = 248;
    const CODE_249 = 249;
    const CODE_250 = 250;
    const CODE_251 = 251;
    const CODE_252 = 252;
    const CODE_253 = 253;
    const CODE_254 = 254;
    const CODE_255 = 255;
    const CODE_256 = 256;
    const CODE_257 = 257;
    const CODE_258 = 258;
    const CODE_259 = 259;
    const CODE_260 = 260;
    const CODE_261 = 261;
    const CODE_262 = 262;
    const CODE_263 = 263;
    const CODE_264 = 264;
    const CODE_265 = 265;
    const CODE_266 = 266;
    const CODE_267 = 267;
    const CODE_268 = 268;
    const CODE_269 = 269;
    const CODE_270 = 270;
    const CODE_271 = 271;
    const CODE_272 = 272;
    const CODE_273 = 273;
    const CODE_274 = 274;
    const CODE_275 = 275;
    const CODE_276 = 276;
    const CODE_277 = 277;
    const CODE_278 = 278;
    const CODE_279 = 279;
    const CODE_280 = 280;
    const CODE_281 = 281;
    const CODE_282 = 282;
    const CODE_283 = 283;
    const CODE_5001 = 5001;
    const CODE_5002 = 5002;
    const CODE_5003 = 5003;
    const CODE_5004 = 5004;
    const CODE_5005 = 5005;
    const CODE_5006 = 5006;
    const CODE_5007 = 5007;
    const CODE_5008 = 5008;
    const CODE_5009 = 5009;
    const CODE_5010 = 5010;
    const CODE_5011 = 5011;
    const CODE_5012 = 5012;
    const CODE_5013 = 5013;
    const CODE_5014 = 5014;
    const CODE_5015 = 5015;
    const CODE_5016 = 5016;
    const CODE_5017 = 5017;
    const CODE_5018 = 5018;
    const CODE_5019 = 5019;
    const CODE_5020 = 5020;
    const CODE_5021 = 5021;
    const CODE_5022 = 5022;
    const CODE_5023 = 5023;
    const CODE_5024 = 5024;
    const CODE_5025 = 5025;
    const CODE_5026 = 5026;
    const CODE_5027 = 5027;
    const CODE_5028 = 5028;
    const CODE_5029 = 5029;
    const CODE_5030 = 5030;
    const CODE_5031 = 5031;
    const CODE_5032 = 5032;
    const CODE_5033 = 5033;
    const CODE_5034 = 5034;
    const CODE_5035 = 5035;
    const CODE_5036 = 5036;
    const CODE_5037 = 5037;
    const CODE_5038 = 5038;
    const CODE_5039 = 5039;
    const CODE_5040 = 5040;
    const CODE_5041 = 5041;
    const CODE_5042 = 5042;
    const CODE_5043 = 5043;
    const CODE_5044 = 5044;
    const CODE_5045 = 5045;
    const CODE_5046 = 5046;
    const CODE_5068 = 5068;
    const CODE_5069 = 5069;
    const CODE_5070 = 5070;
    const CODE_5071 = 5071;
    const CODE_5072 = 5072;
    const CODE_5073 = 5073;
    const CODE_5074 = 5074;
    const CODE_5075 = 5075;
    const CODE_5076 = 5076;
    const CODE_5077 = 5077;
    const CODE_5079 = 5079;
    const CODE_5080 = 5080;
    const CODE_5081 = 5081;
    const CODE_5082 = 5082;
    const CODE_5083 = 5083;
    const CODE_5084 = 5084;
    const CODE_5085 = 5085;
    const CODE_5086 = 5086;
    const CODE_5087 = 5087;
    const CODE_5088 = 5088;
    const CODE_5089 = 5089;
    const CODE_5090 = 5090;
    const CODE_5091 = 5091;
    const CODE_5092 = 5092;
    const CODE_5093 = 5093;
    const CODE_5094 = 5094;
    const CODE_5095 = 5095;
    const CODE_5096 = 5096;
    const CODE_5097 = 5097;
    const CODE_5098 = 5098;
    const CODE_5099 = 5099;
    const CODE_5100 = 5100;
    const CODE_5101 = 5101;
    const CODE_5102 = 5102;
    const CODE_5103 = 5103;
    const CODE_5104 = 5104;
    const CODE_5105 = 5105;
    const CODE_5106 = 5106;
    const CODE_5107 = 5107;
    const CODE_5108 = 5108;
    const CODE_5109 = 5109;
    const CODE_5110 = 5110;
    const CODE_5111 = 5111;
    const CODE_5112 = 5112;
    const CODE_5113 = 5113;
    const CODE_5114 = 5114;
    const CODE_5115 = 5115;
    const CODE_5116 = 5116;
    const CODE_5117 = 5117;
    const CODE_5118 = 5118;
    const CODE_5119 = 5119;
    const CODE_5120 = 5120;
    const CODE_5121 = 5121;
    const CODE_5122 = 5122;
    const CODE_5123 = 5123;
    const CODE_5124 = 5124;
    const CODE_5125 = 5125;
    const CODE_5126 = 5126;
    const CODE_5127 = 5127;
    const CODE_5129 = 5129;
    const CODE_5130 = 5130;
    const CODE_5131 = 5131;
    const CODE_5132 = 5132;
    const CODE_5133 = 5133;
    const CODE_5134 = 5134;
    const CODE_5135 = 5135;
    const CODE_5136 = 5136;
    const CODE_5137 = 5137;
    const CODE_5138 = 5138;
    const CODE_5139 = 5139;
    const CODE_5140 = 5140;
    const CODE_5141 = 5141;
    const CODE_5142 = 5142;
    const CODE_5143 = 5143;
    const CODE_5144 = 5144;
    const CODE_5145 = 5145;
    const CODE_5146 = 5146;
    const CODE_5147 = 5147;
    const CODE_5148 = 5148;
    const CODE_5149 = 5149;
    const CODE_5150 = 5150;
    const CODE_5151 = 5151;
    const CODE_5152 = 5152;
    const CODE_5153 = 5153;
    const CODE_5154 = 5154;
    const CODE_5157 = 5157;
    const CODE_5158 = 5158;
    const CODE_5159 = 5159;
    const CODE_5160 = 5160;
    const CODE_5161 = 5161;
    const CODE_5162 = 5162;
    const CODE_5163 = 5163;
    const CODE_5164 = 5164;
    const CODE_5165 = 5165;
    const CODE_5166 = 5166;
    const CODE_5167 = 5167;
    const CODE_5168 = 5168;
    const CODE_5169 = 5169;
    const CODE_5170 = 5170;
    const CODE_5171 = 5171;
    const CODE_5172 = 5172;
    const CODE_5173 = 5173;
    const CODE_5174 = 5174;
    const CODE_5175 = 5175;
    const CODE_5176 = 5176;
    const CODE_5177 = 5177;
    const CODE_5178 = 5178;
    const CODE_5179 = 5179;
    const CODE_5180 = 5180;
    const CODE_5181 = 5181;
    const CODE_5182 = 5182;
    const CODE_5184 = 5184;
    const CODE_5185 = 5185;
    const CODE_5186 = 5186;
    const CODE_5187 = 5187;
    const CODE_5188 = 5188;
    const CODE_5189 = 5189;
    const CODE_5190 = 5190;
    const CODE_5191 = 5191;
    const CODE_5196 = 5196;
    const CODE_5198 = 5198;
    const CODE_5199 = 5199;
    const CODE_5200 = 5200;
    const CODE_5201 = 5201;
    const CODE_5202 = 5202;
    const CODE_5203 = 5203;
    const CODE_5204 = 5204;
    const CODE_5205 = 5205;
    const CODE_5206 = 5206;
    const CODE_5207 = 5207;
    const CODE_5211 = 5211;
    const CODE_5212 = 5212;
    const CODE_90001 = 90001;
    const CODE_90002 = 90002;
    const CODE_90003 = 90003;
    const CODE_90004 = 90004;
    const CODE_90005 = 90005;
    const CODE_90006 = 90006;
    const CODE_90007 = 90007;
    const CODE_90008 = 90008;
    const CODE_90009 = 90009;
    const CODE_90010 = 90010;
    const CODE_90011 = 90011;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_1,
            self::CODE_2,
            self::CODE_3,
            self::CODE_4,
            self::CODE_5,
            self::CODE_6,
            self::CODE_7,
            self::CODE_8,
            self::CODE_9,
            self::CODE_10,
            self::CODE_11,
            self::CODE_12,
            self::CODE_13,
            self::CODE_14,
            self::CODE_15,
            self::CODE_16,
            self::CODE_17,
            self::CODE_18,
            self::CODE_19,
            self::CODE_20,
            self::CODE_21,
            self::CODE_22,
            self::CODE_23,
            self::CODE_24,
            self::CODE_25,
            self::CODE_26,
            self::CODE_27,
            self::CODE_28,
            self::CODE_29,
            self::CODE_30,
            self::CODE_31,
            self::CODE_32,
            self::CODE_33,
            self::CODE_34,
            self::CODE_35,
            self::CODE_36,
            self::CODE_37,
            self::CODE_38,
            self::CODE_39,
            self::CODE_40,
            self::CODE_41,
            self::CODE_42,
            self::CODE_43,
            self::CODE_44,
            self::CODE_45,
            self::CODE_46,
            self::CODE_47,
            self::CODE_48,
            self::CODE_49,
            self::CODE_50,
            self::CODE_51,
            self::CODE_52,
            self::CODE_53,
            self::CODE_54,
            self::CODE_55,
            self::CODE_56,
            self::CODE_57,
            self::CODE_58,
            self::CODE_59,
            self::CODE_60,
            self::CODE_61,
            self::CODE_62,
            self::CODE_63,
            self::CODE_64,
            self::CODE_65,
            self::CODE_66,
            self::CODE_67,
            self::CODE_68,
            self::CODE_69,
            self::CODE_70,
            self::CODE_71,
            self::CODE_72,
            self::CODE_73,
            self::CODE_74,
            self::CODE_75,
            self::CODE_76,
            self::CODE_77,
            self::CODE_78,
            self::CODE_79,
            self::CODE_80,
            self::CODE_81,
            self::CODE_82,
            self::CODE_83,
            self::CODE_84,
            self::CODE_85,
            self::CODE_86,
            self::CODE_87,
            self::CODE_88,
            self::CODE_89,
            self::CODE_90,
            self::CODE_91,
            self::CODE_92,
            self::CODE_93,
            self::CODE_94,
            self::CODE_95,
            self::CODE_96,
            self::CODE_97,
            self::CODE_98,
            self::CODE_99,
            self::CODE_100,
            self::CODE_101,
            self::CODE_102,
            self::CODE_103,
            self::CODE_104,
            self::CODE_105,
            self::CODE_106,
            self::CODE_107,
            self::CODE_108,
            self::CODE_109,
            self::CODE_110,
            self::CODE_111,
            self::CODE_112,
            self::CODE_113,
            self::CODE_114,
            self::CODE_115,
            self::CODE_116,
            self::CODE_117,
            self::CODE_118,
            self::CODE_119,
            self::CODE_120,
            self::CODE_121,
            self::CODE_122,
            self::CODE_123,
            self::CODE_124,
            self::CODE_125,
            self::CODE_126,
            self::CODE_127,
            self::CODE_128,
            self::CODE_129,
            self::CODE_130,
            self::CODE_131,
            self::CODE_132,
            self::CODE_133,
            self::CODE_134,
            self::CODE_135,
            self::CODE_136,
            self::CODE_137,
            self::CODE_138,
            self::CODE_139,
            self::CODE_140,
            self::CODE_141,
            self::CODE_142,
            self::CODE_143,
            self::CODE_144,
            self::CODE_145,
            self::CODE_146,
            self::CODE_147,
            self::CODE_148,
            self::CODE_149,
            self::CODE_150,
            self::CODE_151,
            self::CODE_152,
            self::CODE_153,
            self::CODE_154,
            self::CODE_155,
            self::CODE_156,
            self::CODE_157,
            self::CODE_158,
            self::CODE_159,
            self::CODE_160,
            self::CODE_161,
            self::CODE_162,
            self::CODE_163,
            self::CODE_164,
            self::CODE_165,
            self::CODE_166,
            self::CODE_167,
            self::CODE_168,
            self::CODE_169,
            self::CODE_170,
            self::CODE_171,
            self::CODE_172,
            self::CODE_173,
            self::CODE_174,
            self::CODE_175,
            self::CODE_176,
            self::CODE_177,
            self::CODE_178,
            self::CODE_179,
            self::CODE_180,
            self::CODE_181,
            self::CODE_182,
            self::CODE_183,
            self::CODE_184,
            self::CODE_185,
            self::CODE_186,
            self::CODE_187,
            self::CODE_188,
            self::CODE_189,
            self::CODE_190,
            self::CODE_191,
            self::CODE_192,
            self::CODE_193,
            self::CODE_194,
            self::CODE_195,
            self::CODE_196,
            self::CODE_197,
            self::CODE_198,
            self::CODE_199,
            self::CODE_200,
            self::CODE_201,
            self::CODE_202,
            self::CODE_203,
            self::CODE_204,
            self::CODE_205,
            self::CODE_206,
            self::CODE_207,
            self::CODE_208,
            self::CODE_209,
            self::CODE_210,
            self::CODE_211,
            self::CODE_212,
            self::CODE_213,
            self::CODE_214,
            self::CODE_215,
            self::CODE_216,
            self::CODE_217,
            self::CODE_218,
            self::CODE_219,
            self::CODE_220,
            self::CODE_221,
            self::CODE_222,
            self::CODE_223,
            self::CODE_224,
            self::CODE_225,
            self::CODE_226,
            self::CODE_227,
            self::CODE_228,
            self::CODE_229,
            self::CODE_230,
            self::CODE_231,
            self::CODE_232,
            self::CODE_233,
            self::CODE_234,
            self::CODE_235,
            self::CODE_236,
            self::CODE_237,
            self::CODE_238,
            self::CODE_239,
            self::CODE_240,
            self::CODE_241,
            self::CODE_242,
            self::CODE_243,
            self::CODE_244,
            self::CODE_245,
            self::CODE_246,
            self::CODE_247,
            self::CODE_248,
            self::CODE_249,
            self::CODE_250,
            self::CODE_251,
            self::CODE_252,
            self::CODE_253,
            self::CODE_254,
            self::CODE_255,
            self::CODE_256,
            self::CODE_257,
            self::CODE_258,
            self::CODE_259,
            self::CODE_260,
            self::CODE_261,
            self::CODE_262,
            self::CODE_263,
            self::CODE_264,
            self::CODE_265,
            self::CODE_266,
            self::CODE_267,
            self::CODE_268,
            self::CODE_269,
            self::CODE_270,
            self::CODE_271,
            self::CODE_272,
            self::CODE_273,
            self::CODE_274,
            self::CODE_275,
            self::CODE_276,
            self::CODE_277,
            self::CODE_278,
            self::CODE_279,
            self::CODE_280,
            self::CODE_281,
            self::CODE_282,
            self::CODE_283,
            self::CODE_5001,
            self::CODE_5002,
            self::CODE_5003,
            self::CODE_5004,
            self::CODE_5005,
            self::CODE_5006,
            self::CODE_5007,
            self::CODE_5008,
            self::CODE_5009,
            self::CODE_5010,
            self::CODE_5011,
            self::CODE_5012,
            self::CODE_5013,
            self::CODE_5014,
            self::CODE_5015,
            self::CODE_5016,
            self::CODE_5017,
            self::CODE_5018,
            self::CODE_5019,
            self::CODE_5020,
            self::CODE_5021,
            self::CODE_5022,
            self::CODE_5023,
            self::CODE_5024,
            self::CODE_5025,
            self::CODE_5026,
            self::CODE_5027,
            self::CODE_5028,
            self::CODE_5029,
            self::CODE_5030,
            self::CODE_5031,
            self::CODE_5032,
            self::CODE_5033,
            self::CODE_5034,
            self::CODE_5035,
            self::CODE_5036,
            self::CODE_5037,
            self::CODE_5038,
            self::CODE_5039,
            self::CODE_5040,
            self::CODE_5041,
            self::CODE_5042,
            self::CODE_5043,
            self::CODE_5044,
            self::CODE_5045,
            self::CODE_5046,
            self::CODE_5068,
            self::CODE_5069,
            self::CODE_5070,
            self::CODE_5071,
            self::CODE_5072,
            self::CODE_5073,
            self::CODE_5074,
            self::CODE_5075,
            self::CODE_5076,
            self::CODE_5077,
            self::CODE_5079,
            self::CODE_5080,
            self::CODE_5081,
            self::CODE_5082,
            self::CODE_5083,
            self::CODE_5084,
            self::CODE_5085,
            self::CODE_5086,
            self::CODE_5087,
            self::CODE_5088,
            self::CODE_5089,
            self::CODE_5090,
            self::CODE_5091,
            self::CODE_5092,
            self::CODE_5093,
            self::CODE_5094,
            self::CODE_5095,
            self::CODE_5096,
            self::CODE_5097,
            self::CODE_5098,
            self::CODE_5099,
            self::CODE_5100,
            self::CODE_5101,
            self::CODE_5102,
            self::CODE_5103,
            self::CODE_5104,
            self::CODE_5105,
            self::CODE_5106,
            self::CODE_5107,
            self::CODE_5108,
            self::CODE_5109,
            self::CODE_5110,
            self::CODE_5111,
            self::CODE_5112,
            self::CODE_5113,
            self::CODE_5114,
            self::CODE_5115,
            self::CODE_5116,
            self::CODE_5117,
            self::CODE_5118,
            self::CODE_5119,
            self::CODE_5120,
            self::CODE_5121,
            self::CODE_5122,
            self::CODE_5123,
            self::CODE_5124,
            self::CODE_5125,
            self::CODE_5126,
            self::CODE_5127,
            self::CODE_5129,
            self::CODE_5130,
            self::CODE_5131,
            self::CODE_5132,
            self::CODE_5133,
            self::CODE_5134,
            self::CODE_5135,
            self::CODE_5136,
            self::CODE_5137,
            self::CODE_5138,
            self::CODE_5139,
            self::CODE_5140,
            self::CODE_5141,
            self::CODE_5142,
            self::CODE_5143,
            self::CODE_5144,
            self::CODE_5145,
            self::CODE_5146,
            self::CODE_5147,
            self::CODE_5148,
            self::CODE_5149,
            self::CODE_5150,
            self::CODE_5151,
            self::CODE_5152,
            self::CODE_5153,
            self::CODE_5154,
            self::CODE_5157,
            self::CODE_5158,
            self::CODE_5159,
            self::CODE_5160,
            self::CODE_5161,
            self::CODE_5162,
            self::CODE_5163,
            self::CODE_5164,
            self::CODE_5165,
            self::CODE_5166,
            self::CODE_5167,
            self::CODE_5168,
            self::CODE_5169,
            self::CODE_5170,
            self::CODE_5171,
            self::CODE_5172,
            self::CODE_5173,
            self::CODE_5174,
            self::CODE_5175,
            self::CODE_5176,
            self::CODE_5177,
            self::CODE_5178,
            self::CODE_5179,
            self::CODE_5180,
            self::CODE_5181,
            self::CODE_5182,
            self::CODE_5184,
            self::CODE_5185,
            self::CODE_5186,
            self::CODE_5187,
            self::CODE_5188,
            self::CODE_5189,
            self::CODE_5190,
            self::CODE_5191,
            self::CODE_5196,
            self::CODE_5198,
            self::CODE_5199,
            self::CODE_5200,
            self::CODE_5201,
            self::CODE_5202,
            self::CODE_5203,
            self::CODE_5204,
            self::CODE_5205,
            self::CODE_5206,
            self::CODE_5207,
            self::CODE_5211,
            self::CODE_5212,
            self::CODE_90001,
            self::CODE_90002,
            self::CODE_90003,
            self::CODE_90004,
            self::CODE_90005,
            self::CODE_90006,
            self::CODE_90007,
            self::CODE_90008,
            self::CODE_90009,
            self::CODE_90010,
            self::CODE_90011,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return float
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param float $code The code indicating the room amenity type.<p>See also <a href=\"#unitand-room-amenity-type-codes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity The quantity of this amenity type in this room.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


