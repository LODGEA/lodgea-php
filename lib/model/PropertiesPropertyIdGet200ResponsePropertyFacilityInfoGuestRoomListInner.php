<?php
/**
 * PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for PHP. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner Class Doc Comment
 *
 * @category Class
 * @description An object representing a room in the property.
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_properties__propertyId__get_200_response_property_facilityInfo_guestRoomList_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_active' => 'bool',
        'room_id' => 'string',
        'name' => 'string',
        'media_list' => '\com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner[]',
        'room_type_code' => 'float',
        'is_non_smoking' => 'bool',
        'amenity_list' => '\com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerAmenityListInner[]',
        'message_list' => '\com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMessageListInner[]',
        'max_occupancy' => 'float',
        'max_adult_occupancy' => 'float',
        'max_child_occupancy' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_active' => null,
        'room_id' => null,
        'name' => null,
        'media_list' => null,
        'room_type_code' => null,
        'is_non_smoking' => null,
        'amenity_list' => null,
        'message_list' => null,
        'max_occupancy' => null,
        'max_adult_occupancy' => null,
        'max_child_occupancy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_active' => 'isActive',
        'room_id' => 'roomId',
        'name' => 'name',
        'media_list' => 'mediaList',
        'room_type_code' => 'roomTypeCode',
        'is_non_smoking' => 'isNonSmoking',
        'amenity_list' => 'amenityList',
        'message_list' => 'messageList',
        'max_occupancy' => 'maxOccupancy',
        'max_adult_occupancy' => 'maxAdultOccupancy',
        'max_child_occupancy' => 'maxChildOccupancy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_active' => 'setIsActive',
        'room_id' => 'setRoomId',
        'name' => 'setName',
        'media_list' => 'setMediaList',
        'room_type_code' => 'setRoomTypeCode',
        'is_non_smoking' => 'setIsNonSmoking',
        'amenity_list' => 'setAmenityList',
        'message_list' => 'setMessageList',
        'max_occupancy' => 'setMaxOccupancy',
        'max_adult_occupancy' => 'setMaxAdultOccupancy',
        'max_child_occupancy' => 'setMaxChildOccupancy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_active' => 'getIsActive',
        'room_id' => 'getRoomId',
        'name' => 'getName',
        'media_list' => 'getMediaList',
        'room_type_code' => 'getRoomTypeCode',
        'is_non_smoking' => 'getIsNonSmoking',
        'amenity_list' => 'getAmenityList',
        'message_list' => 'getMessageList',
        'max_occupancy' => 'getMaxOccupancy',
        'max_adult_occupancy' => 'getMaxAdultOccupancy',
        'max_child_occupancy' => 'getMaxChildOccupancy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROOM_TYPE_CODE_1 = 1;
    public const ROOM_TYPE_CODE_4 = 4;
    public const ROOM_TYPE_CODE_5 = 5;
    public const ROOM_TYPE_CODE_7 = 7;
    public const ROOM_TYPE_CODE_8 = 8;
    public const ROOM_TYPE_CODE_9 = 9;
    public const ROOM_TYPE_CODE_10 = 10;
    public const ROOM_TYPE_CODE_12 = 12;
    public const ROOM_TYPE_CODE_13 = 13;
    public const ROOM_TYPE_CODE_24 = 24;
    public const ROOM_TYPE_CODE_25 = 25;
    public const ROOM_TYPE_CODE_26 = 26;
    public const ROOM_TYPE_CODE_27 = 27;
    public const ROOM_TYPE_CODE_28 = 28;
    public const ROOM_TYPE_CODE_29 = 29;
    public const ROOM_TYPE_CODE_31 = 31;
    public const ROOM_TYPE_CODE_32 = 32;
    public const ROOM_TYPE_CODE_33 = 33;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoomTypeCodeAllowableValues()
    {
        return [
            self::ROOM_TYPE_CODE_1,
            self::ROOM_TYPE_CODE_4,
            self::ROOM_TYPE_CODE_5,
            self::ROOM_TYPE_CODE_7,
            self::ROOM_TYPE_CODE_8,
            self::ROOM_TYPE_CODE_9,
            self::ROOM_TYPE_CODE_10,
            self::ROOM_TYPE_CODE_12,
            self::ROOM_TYPE_CODE_13,
            self::ROOM_TYPE_CODE_24,
            self::ROOM_TYPE_CODE_25,
            self::ROOM_TYPE_CODE_26,
            self::ROOM_TYPE_CODE_27,
            self::ROOM_TYPE_CODE_28,
            self::ROOM_TYPE_CODE_29,
            self::ROOM_TYPE_CODE_31,
            self::ROOM_TYPE_CODE_32,
            self::ROOM_TYPE_CODE_33,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['room_id'] = $data['room_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['media_list'] = $data['media_list'] ?? null;
        $this->container['room_type_code'] = $data['room_type_code'] ?? null;
        $this->container['is_non_smoking'] = $data['is_non_smoking'] ?? null;
        $this->container['amenity_list'] = $data['amenity_list'] ?? null;
        $this->container['message_list'] = $data['message_list'] ?? null;
        $this->container['max_occupancy'] = $data['max_occupancy'] ?? null;
        $this->container['max_adult_occupancy'] = $data['max_adult_occupancy'] ?? null;
        $this->container['max_child_occupancy'] = $data['max_child_occupancy'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['room_id'] === null) {
            $invalidProperties[] = "'room_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['media_list'] === null) {
            $invalidProperties[] = "'media_list' can't be null";
        }
        if ($this->container['room_type_code'] === null) {
            $invalidProperties[] = "'room_type_code' can't be null";
        }
        $allowedValues = $this->getRoomTypeCodeAllowableValues();
        if (!is_null($this->container['room_type_code']) && !in_array($this->container['room_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'room_type_code', must be one of '%s'",
                $this->container['room_type_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_non_smoking'] === null) {
            $invalidProperties[] = "'is_non_smoking' can't be null";
        }
        if ($this->container['amenity_list'] === null) {
            $invalidProperties[] = "'amenity_list' can't be null";
        }
        if ($this->container['message_list'] === null) {
            $invalidProperties[] = "'message_list' can't be null";
        }
        if ($this->container['max_occupancy'] === null) {
            $invalidProperties[] = "'max_occupancy' can't be null";
        }
        if ($this->container['max_adult_occupancy'] === null) {
            $invalidProperties[] = "'max_adult_occupancy' can't be null";
        }
        if ($this->container['max_child_occupancy'] === null) {
            $invalidProperties[] = "'max_child_occupancy' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Indicates whether the room is active or not.
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return string
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param string $room_id The unique identifier for the room.
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the room.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets media_list
     *
     * @return \com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner[]
     */
    public function getMediaList()
    {
        return $this->container['media_list'];
    }

    /**
     * Sets media_list
     *
     * @param \com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner[] $media_list A list of media objects for the room.
     *
     * @return self
     */
    public function setMediaList($media_list)
    {
        $this->container['media_list'] = $media_list;

        return $this;
    }

    /**
     * Gets room_type_code
     *
     * @return float
     */
    public function getRoomTypeCode()
    {
        return $this->container['room_type_code'];
    }

    /**
     * Sets room_type_code
     *
     * @param float $room_type_code The unit and room type code.<p>See also <a href=\"#unitand-room-type-codes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setRoomTypeCode($room_type_code)
    {
        $allowedValues = $this->getRoomTypeCodeAllowableValues();
        if (!in_array($room_type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'room_type_code', must be one of '%s'",
                    $room_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['room_type_code'] = $room_type_code;

        return $this;
    }

    /**
     * Gets is_non_smoking
     *
     * @return bool
     */
    public function getIsNonSmoking()
    {
        return $this->container['is_non_smoking'];
    }

    /**
     * Sets is_non_smoking
     *
     * @param bool $is_non_smoking Indicates whether the room is designated as non-smoking.
     *
     * @return self
     */
    public function setIsNonSmoking($is_non_smoking)
    {
        $this->container['is_non_smoking'] = $is_non_smoking;

        return $this;
    }

    /**
     * Gets amenity_list
     *
     * @return \com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerAmenityListInner[]
     */
    public function getAmenityList()
    {
        return $this->container['amenity_list'];
    }

    /**
     * Sets amenity_list
     *
     * @param \com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerAmenityListInner[] $amenity_list A list of amenities provided in the room.
     *
     * @return self
     */
    public function setAmenityList($amenity_list)
    {
        $this->container['amenity_list'] = $amenity_list;

        return $this;
    }

    /**
     * Gets message_list
     *
     * @return \com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMessageListInner[]
     */
    public function getMessageList()
    {
        return $this->container['message_list'];
    }

    /**
     * Sets message_list
     *
     * @param \com.lodgea\com.lodgea.model\PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMessageListInner[] $message_list A list of messages associated with the room.
     *
     * @return self
     */
    public function setMessageList($message_list)
    {
        $this->container['message_list'] = $message_list;

        return $this;
    }

    /**
     * Gets max_occupancy
     *
     * @return float
     */
    public function getMaxOccupancy()
    {
        return $this->container['max_occupancy'];
    }

    /**
     * Sets max_occupancy
     *
     * @param float $max_occupancy The maximum occupancy of the room.
     *
     * @return self
     */
    public function setMaxOccupancy($max_occupancy)
    {
        $this->container['max_occupancy'] = $max_occupancy;

        return $this;
    }

    /**
     * Gets max_adult_occupancy
     *
     * @return float
     */
    public function getMaxAdultOccupancy()
    {
        return $this->container['max_adult_occupancy'];
    }

    /**
     * Sets max_adult_occupancy
     *
     * @param float $max_adult_occupancy The maximum number of adults that can occupy the room.
     *
     * @return self
     */
    public function setMaxAdultOccupancy($max_adult_occupancy)
    {
        $this->container['max_adult_occupancy'] = $max_adult_occupancy;

        return $this;
    }

    /**
     * Gets max_child_occupancy
     *
     * @return float
     */
    public function getMaxChildOccupancy()
    {
        return $this->container['max_child_occupancy'];
    }

    /**
     * Sets max_child_occupancy
     *
     * @param float $max_child_occupancy The maximum number of children that can occupy the room.
     *
     * @return self
     */
    public function setMaxChildOccupancy($max_child_occupancy)
    {
        $this->container['max_child_occupancy'] = $max_child_occupancy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


