<?php
/**
 * InlineResponse2003PropertyPropertyInfo
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for php. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * InlineResponse2003PropertyPropertyInfo Class Doc Comment
 *
 * @category Class
 * @description General information regarding the property.
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2003PropertyPropertyInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_3_property_propertyInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_count' => 'float',
        'message_list' => '\com.lodgea\com.lodgea.model\InlineResponse2003PropertyPropertyInfoMessageList[]',
        'category_list' => 'float[]',
        'language_list' => 'string[]',
        'location' => '\com.lodgea\com.lodgea.model\InlineResponse2001GeoLocation',
        'accepted_payment_list' => '\com.lodgea\com.lodgea.model\InlineResponse2003PropertyPropertyInfoAcceptedPaymentList[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_count' => null,
        'message_list' => null,
        'category_list' => null,
        'language_list' => null,
        'location' => null,
        'accepted_payment_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_count' => 'unitCount',
        'message_list' => 'messageList',
        'category_list' => 'categoryList',
        'language_list' => 'languageList',
        'location' => 'location',
        'accepted_payment_list' => 'acceptedPaymentList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_count' => 'setUnitCount',
        'message_list' => 'setMessageList',
        'category_list' => 'setCategoryList',
        'language_list' => 'setLanguageList',
        'location' => 'setLocation',
        'accepted_payment_list' => 'setAcceptedPaymentList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_count' => 'getUnitCount',
        'message_list' => 'getMessageList',
        'category_list' => 'getCategoryList',
        'language_list' => 'getLanguageList',
        'location' => 'getLocation',
        'accepted_payment_list' => 'getAcceptedPaymentList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CATEGORY_LIST_1 = 1;
    const CATEGORY_LIST_2 = 2;
    const CATEGORY_LIST_3 = 3;
    const CATEGORY_LIST_4 = 4;
    const CATEGORY_LIST_5 = 5;
    const CATEGORY_LIST_6 = 6;
    const CATEGORY_LIST_7 = 7;
    const CATEGORY_LIST_8 = 8;
    const CATEGORY_LIST_9 = 9;
    const CATEGORY_LIST_10 = 10;
    const CATEGORY_LIST_11 = 11;
    const CATEGORY_LIST_12 = 12;
    const CATEGORY_LIST_13 = 13;
    const CATEGORY_LIST_14 = 14;
    const CATEGORY_LIST_15 = 15;
    const CATEGORY_LIST_16 = 16;
    const CATEGORY_LIST_17 = 17;
    const CATEGORY_LIST_18 = 18;
    const CATEGORY_LIST_19 = 19;
    const CATEGORY_LIST_20 = 20;
    const CATEGORY_LIST_21 = 21;
    const CATEGORY_LIST_22 = 22;
    const CATEGORY_LIST_23 = 23;
    const CATEGORY_LIST_24 = 24;
    const CATEGORY_LIST_25 = 25;
    const CATEGORY_LIST_26 = 26;
    const CATEGORY_LIST_27 = 27;
    const CATEGORY_LIST_28 = 28;
    const CATEGORY_LIST_29 = 29;
    const CATEGORY_LIST_30 = 30;
    const CATEGORY_LIST_31 = 31;
    const CATEGORY_LIST_32 = 32;
    const CATEGORY_LIST_33 = 33;
    const CATEGORY_LIST_34 = 34;
    const CATEGORY_LIST_35 = 35;
    const CATEGORY_LIST_36 = 36;
    const CATEGORY_LIST_37 = 37;
    const CATEGORY_LIST_38 = 38;
    const CATEGORY_LIST_39 = 39;
    const CATEGORY_LIST_40 = 40;
    const CATEGORY_LIST_41 = 41;
    const CATEGORY_LIST_42 = 42;
    const CATEGORY_LIST_43 = 43;
    const CATEGORY_LIST_44 = 44;
    const CATEGORY_LIST_45 = 45;
    const CATEGORY_LIST_46 = 46;
    const CATEGORY_LIST_47 = 47;
    const CATEGORY_LIST_48 = 48;
    const CATEGORY_LIST_49 = 49;
    const CATEGORY_LIST_50 = 50;
    const CATEGORY_LIST_51 = 51;
    const CATEGORY_LIST_52 = 52;
    const CATEGORY_LIST_53 = 53;
    const CATEGORY_LIST_54 = 54;
    const CATEGORY_LIST_55 = 55;
    const CATEGORY_LIST_56 = 56;
    const CATEGORY_LIST_57 = 57;
    const CATEGORY_LIST_58 = 58;
    const CATEGORY_LIST_59 = 59;
    const CATEGORY_LIST_60 = 60;
    const CATEGORY_LIST_61 = 61;
    const CATEGORY_LIST_62 = 62;
    const CATEGORY_LIST_5000 = 5000;
    const CATEGORY_LIST_5001 = 5001;
    const CATEGORY_LIST_5002 = 5002;
    const CATEGORY_LIST_5003 = 5003;
    const CATEGORY_LIST_5004 = 5004;
    const CATEGORY_LIST_5005 = 5005;
    const CATEGORY_LIST_5006 = 5006;
    const CATEGORY_LIST_5007 = 5007;
    const CATEGORY_LIST_5008 = 5008;
    const CATEGORY_LIST_5009 = 5009;
    const LANGUAGE_LIST_AF = 'af';
    const LANGUAGE_LIST_AR = 'ar';
    const LANGUAGE_LIST_AZ = 'az';
    const LANGUAGE_LIST_BE = 'be';
    const LANGUAGE_LIST_BG = 'bg';
    const LANGUAGE_LIST_CA = 'ca';
    const LANGUAGE_LIST_CS = 'cs';
    const LANGUAGE_LIST_DA = 'da';
    const LANGUAGE_LIST_DE = 'de';
    const LANGUAGE_LIST_EL = 'el';
    const LANGUAGE_LIST_EN = 'en';
    const LANGUAGE_LIST_EN_GB = 'en-gb';
    const LANGUAGE_LIST_EN_US = 'en-us';
    const LANGUAGE_LIST_ES = 'es';
    const LANGUAGE_LIST_ES_AR = 'es-ar';
    const LANGUAGE_LIST_ET = 'et';
    const LANGUAGE_LIST_FR = 'fr';
    const LANGUAGE_LIST_FI = 'fi';
    const LANGUAGE_LIST_HE = 'he';
    const LANGUAGE_LIST_HI = 'hi';
    const LANGUAGE_LIST_HR = 'hr';
    const LANGUAGE_LIST_HU = 'hu';
    const LANGUAGE_LIST_ID = 'id';
    const LANGUAGE_LIST_IS = 'is';
    const LANGUAGE_LIST_IT = 'it';
    const LANGUAGE_LIST_JA = 'ja';
    const LANGUAGE_LIST_KM = 'km';
    const LANGUAGE_LIST_KO = 'ko';
    const LANGUAGE_LIST_LO = 'lo';
    const LANGUAGE_LIST_LT = 'lt';
    const LANGUAGE_LIST_LV = 'lv';
    const LANGUAGE_LIST_MS = 'ms';
    const LANGUAGE_LIST_NL = 'nl';
    const LANGUAGE_LIST_NO = 'no';
    const LANGUAGE_LIST_PL = 'pl';
    const LANGUAGE_LIST_PT = 'pt';
    const LANGUAGE_LIST_PT_BR = 'pt-br';
    const LANGUAGE_LIST_PT_PT = 'pt-pt';
    const LANGUAGE_LIST_RO = 'ro';
    const LANGUAGE_LIST_RU = 'ru';
    const LANGUAGE_LIST_SK = 'sk';
    const LANGUAGE_LIST_SL = 'sl';
    const LANGUAGE_LIST_SR = 'sr';
    const LANGUAGE_LIST_SV = 'sv';
    const LANGUAGE_LIST_TL = 'tl';
    const LANGUAGE_LIST_TH = 'th';
    const LANGUAGE_LIST_TR = 'tr';
    const LANGUAGE_LIST_UK = 'uk';
    const LANGUAGE_LIST_VI = 'vi';
    const LANGUAGE_LIST_XA = 'xa';
    const LANGUAGE_LIST_XB = 'xb';
    const LANGUAGE_LIST_XS = 'xs';
    const LANGUAGE_LIST_XT = 'xt';
    const LANGUAGE_LIST_XU = 'xu';
    const LANGUAGE_LIST_ZH = 'zh';
    const LANGUAGE_LIST_ZH_CN = 'zh-cn';
    const LANGUAGE_LIST_ZH_TW = 'zh-tw';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryListAllowableValues()
    {
        return [
            self::CATEGORY_LIST_1,
            self::CATEGORY_LIST_2,
            self::CATEGORY_LIST_3,
            self::CATEGORY_LIST_4,
            self::CATEGORY_LIST_5,
            self::CATEGORY_LIST_6,
            self::CATEGORY_LIST_7,
            self::CATEGORY_LIST_8,
            self::CATEGORY_LIST_9,
            self::CATEGORY_LIST_10,
            self::CATEGORY_LIST_11,
            self::CATEGORY_LIST_12,
            self::CATEGORY_LIST_13,
            self::CATEGORY_LIST_14,
            self::CATEGORY_LIST_15,
            self::CATEGORY_LIST_16,
            self::CATEGORY_LIST_17,
            self::CATEGORY_LIST_18,
            self::CATEGORY_LIST_19,
            self::CATEGORY_LIST_20,
            self::CATEGORY_LIST_21,
            self::CATEGORY_LIST_22,
            self::CATEGORY_LIST_23,
            self::CATEGORY_LIST_24,
            self::CATEGORY_LIST_25,
            self::CATEGORY_LIST_26,
            self::CATEGORY_LIST_27,
            self::CATEGORY_LIST_28,
            self::CATEGORY_LIST_29,
            self::CATEGORY_LIST_30,
            self::CATEGORY_LIST_31,
            self::CATEGORY_LIST_32,
            self::CATEGORY_LIST_33,
            self::CATEGORY_LIST_34,
            self::CATEGORY_LIST_35,
            self::CATEGORY_LIST_36,
            self::CATEGORY_LIST_37,
            self::CATEGORY_LIST_38,
            self::CATEGORY_LIST_39,
            self::CATEGORY_LIST_40,
            self::CATEGORY_LIST_41,
            self::CATEGORY_LIST_42,
            self::CATEGORY_LIST_43,
            self::CATEGORY_LIST_44,
            self::CATEGORY_LIST_45,
            self::CATEGORY_LIST_46,
            self::CATEGORY_LIST_47,
            self::CATEGORY_LIST_48,
            self::CATEGORY_LIST_49,
            self::CATEGORY_LIST_50,
            self::CATEGORY_LIST_51,
            self::CATEGORY_LIST_52,
            self::CATEGORY_LIST_53,
            self::CATEGORY_LIST_54,
            self::CATEGORY_LIST_55,
            self::CATEGORY_LIST_56,
            self::CATEGORY_LIST_57,
            self::CATEGORY_LIST_58,
            self::CATEGORY_LIST_59,
            self::CATEGORY_LIST_60,
            self::CATEGORY_LIST_61,
            self::CATEGORY_LIST_62,
            self::CATEGORY_LIST_5000,
            self::CATEGORY_LIST_5001,
            self::CATEGORY_LIST_5002,
            self::CATEGORY_LIST_5003,
            self::CATEGORY_LIST_5004,
            self::CATEGORY_LIST_5005,
            self::CATEGORY_LIST_5006,
            self::CATEGORY_LIST_5007,
            self::CATEGORY_LIST_5008,
            self::CATEGORY_LIST_5009,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageListAllowableValues()
    {
        return [
            self::LANGUAGE_LIST_AF,
            self::LANGUAGE_LIST_AR,
            self::LANGUAGE_LIST_AZ,
            self::LANGUAGE_LIST_BE,
            self::LANGUAGE_LIST_BG,
            self::LANGUAGE_LIST_CA,
            self::LANGUAGE_LIST_CS,
            self::LANGUAGE_LIST_DA,
            self::LANGUAGE_LIST_DE,
            self::LANGUAGE_LIST_EL,
            self::LANGUAGE_LIST_EN,
            self::LANGUAGE_LIST_EN_GB,
            self::LANGUAGE_LIST_EN_US,
            self::LANGUAGE_LIST_ES,
            self::LANGUAGE_LIST_ES_AR,
            self::LANGUAGE_LIST_ET,
            self::LANGUAGE_LIST_FR,
            self::LANGUAGE_LIST_FI,
            self::LANGUAGE_LIST_HE,
            self::LANGUAGE_LIST_HI,
            self::LANGUAGE_LIST_HR,
            self::LANGUAGE_LIST_HU,
            self::LANGUAGE_LIST_ID,
            self::LANGUAGE_LIST_IS,
            self::LANGUAGE_LIST_IT,
            self::LANGUAGE_LIST_JA,
            self::LANGUAGE_LIST_KM,
            self::LANGUAGE_LIST_KO,
            self::LANGUAGE_LIST_LO,
            self::LANGUAGE_LIST_LT,
            self::LANGUAGE_LIST_LV,
            self::LANGUAGE_LIST_MS,
            self::LANGUAGE_LIST_NL,
            self::LANGUAGE_LIST_NO,
            self::LANGUAGE_LIST_PL,
            self::LANGUAGE_LIST_PT,
            self::LANGUAGE_LIST_PT_BR,
            self::LANGUAGE_LIST_PT_PT,
            self::LANGUAGE_LIST_RO,
            self::LANGUAGE_LIST_RU,
            self::LANGUAGE_LIST_SK,
            self::LANGUAGE_LIST_SL,
            self::LANGUAGE_LIST_SR,
            self::LANGUAGE_LIST_SV,
            self::LANGUAGE_LIST_TL,
            self::LANGUAGE_LIST_TH,
            self::LANGUAGE_LIST_TR,
            self::LANGUAGE_LIST_UK,
            self::LANGUAGE_LIST_VI,
            self::LANGUAGE_LIST_XA,
            self::LANGUAGE_LIST_XB,
            self::LANGUAGE_LIST_XS,
            self::LANGUAGE_LIST_XT,
            self::LANGUAGE_LIST_XU,
            self::LANGUAGE_LIST_ZH,
            self::LANGUAGE_LIST_ZH_CN,
            self::LANGUAGE_LIST_ZH_TW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_count'] = $data['unit_count'] ?? null;
        $this->container['message_list'] = $data['message_list'] ?? null;
        $this->container['category_list'] = $data['category_list'] ?? null;
        $this->container['language_list'] = $data['language_list'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['accepted_payment_list'] = $data['accepted_payment_list'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message_list'] === null) {
            $invalidProperties[] = "'message_list' can't be null";
        }
        if ($this->container['category_list'] === null) {
            $invalidProperties[] = "'category_list' can't be null";
        }
        if ($this->container['language_list'] === null) {
            $invalidProperties[] = "'language_list' can't be null";
        }
        if ($this->container['accepted_payment_list'] === null) {
            $invalidProperties[] = "'accepted_payment_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_count
     *
     * @return float|null
     */
    public function getUnitCount()
    {
        return $this->container['unit_count'];
    }

    /**
     * Sets unit_count
     *
     * @param float|null $unit_count The amount of units the property has.
     *
     * @return self
     */
    public function setUnitCount($unit_count)
    {
        $this->container['unit_count'] = $unit_count;

        return $this;
    }

    /**
     * Gets message_list
     *
     * @return \com.lodgea\com.lodgea.model\InlineResponse2003PropertyPropertyInfoMessageList[]
     */
    public function getMessageList()
    {
        return $this->container['message_list'];
    }

    /**
     * Sets message_list
     *
     * @param \com.lodgea\com.lodgea.model\InlineResponse2003PropertyPropertyInfoMessageList[] $message_list Contains a descriptive message for this property in all supported languages.
     *
     * @return self
     */
    public function setMessageList($message_list)
    {
        $this->container['message_list'] = $message_list;

        return $this;
    }

    /**
     * Gets category_list
     *
     * @return float[]
     */
    public function getCategoryList()
    {
        return $this->container['category_list'];
    }

    /**
     * Sets category_list
     *
     * @param float[] $category_list A list of code of the property class types that apply to the property.
     *
     * @return self
     */
    public function setCategoryList($category_list)
    {
        $allowedValues = $this->getCategoryListAllowableValues();
        if (array_diff($category_list, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category_list', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category_list'] = $category_list;

        return $this;
    }

    /**
     * Gets language_list
     *
     * @return string[]
     */
    public function getLanguageList()
    {
        return $this->container['language_list'];
    }

    /**
     * Sets language_list
     *
     * @param string[] $language_list The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.<p>See also <a href=\"#languagecountry-code\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setLanguageList($language_list)
    {
        $allowedValues = $this->getLanguageListAllowableValues();
        if (array_diff($language_list, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language_list', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language_list'] = $language_list;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \com.lodgea\com.lodgea.model\InlineResponse2001GeoLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \com.lodgea\com.lodgea.model\InlineResponse2001GeoLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets accepted_payment_list
     *
     * @return \com.lodgea\com.lodgea.model\InlineResponse2003PropertyPropertyInfoAcceptedPaymentList[]
     */
    public function getAcceptedPaymentList()
    {
        return $this->container['accepted_payment_list'];
    }

    /**
     * Sets accepted_payment_list
     *
     * @param \com.lodgea\com.lodgea.model\InlineResponse2003PropertyPropertyInfoAcceptedPaymentList[] $accepted_payment_list A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.<p>See also <a href=\"#paymenttypes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setAcceptedPaymentList($accepted_payment_list)
    {
        $this->container['accepted_payment_list'] = $accepted_payment_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


