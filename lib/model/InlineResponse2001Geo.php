<?php
/**
 * InlineResponse2001Geo
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * lodgea-php
 *
 * LODGEA SDK for php. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.lodgea\com.lodgea.model;

use \ArrayAccess;
use \com.lodgea\ObjectSerializer;

/**
 * InlineResponse2001Geo Class Doc Comment
 *
 * @category Class
 * @description A geographical information set describing the location of this property.&lt;br&gt;&lt;br&gt;See also &lt;a href&#x3D;\&quot;#locationtypes\&quot;&gt;in the appendix&lt;/a&gt;.
 * @package  com.lodgea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2001Geo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_1_geo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'language' => 'string',
        'formatted_address' => 'string',
        'route' => 'string',
        'street_number' => 'string',
        'postal_code' => 'string',
        'locality' => 'string',
        'sublocality' => 'string',
        'sublocality_level_1' => 'string',
        'sublocality_level_2' => 'string',
        'sublocality_level_3' => 'string',
        'sublocality_level_4' => 'string',
        'sublocality_level_5' => 'string',
        'administrative_area_level_1' => 'string',
        'administrative_area_level_2' => 'string',
        'administrative_area_level_3' => 'string',
        'administrative_area_level_4' => 'string',
        'administrative_area_level_5' => 'string',
        'state_code' => 'string',
        'country' => 'string',
        'country_code' => 'string',
        'location' => '\com.lodgea\com.lodgea.model\InlineResponse2001GeoLocation',
        'place_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'language' => null,
        'formatted_address' => null,
        'route' => null,
        'street_number' => null,
        'postal_code' => null,
        'locality' => null,
        'sublocality' => null,
        'sublocality_level_1' => null,
        'sublocality_level_2' => null,
        'sublocality_level_3' => null,
        'sublocality_level_4' => null,
        'sublocality_level_5' => null,
        'administrative_area_level_1' => null,
        'administrative_area_level_2' => null,
        'administrative_area_level_3' => null,
        'administrative_area_level_4' => null,
        'administrative_area_level_5' => null,
        'state_code' => null,
        'country' => null,
        'country_code' => null,
        'location' => null,
        'place_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
        'formatted_address' => 'formatted_address',
        'route' => 'route',
        'street_number' => 'street_number',
        'postal_code' => 'postal_code',
        'locality' => 'locality',
        'sublocality' => 'sublocality',
        'sublocality_level_1' => 'sublocality_level_1',
        'sublocality_level_2' => 'sublocality_level_2',
        'sublocality_level_3' => 'sublocality_level_3',
        'sublocality_level_4' => 'sublocality_level_4',
        'sublocality_level_5' => 'sublocality_level_5',
        'administrative_area_level_1' => 'administrative_area_level_1',
        'administrative_area_level_2' => 'administrative_area_level_2',
        'administrative_area_level_3' => 'administrative_area_level_3',
        'administrative_area_level_4' => 'administrative_area_level_4',
        'administrative_area_level_5' => 'administrative_area_level_5',
        'state_code' => 'state_code',
        'country' => 'country',
        'country_code' => 'country_code',
        'location' => 'location',
        'place_id' => 'place_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
        'formatted_address' => 'setFormattedAddress',
        'route' => 'setRoute',
        'street_number' => 'setStreetNumber',
        'postal_code' => 'setPostalCode',
        'locality' => 'setLocality',
        'sublocality' => 'setSublocality',
        'sublocality_level_1' => 'setSublocalityLevel1',
        'sublocality_level_2' => 'setSublocalityLevel2',
        'sublocality_level_3' => 'setSublocalityLevel3',
        'sublocality_level_4' => 'setSublocalityLevel4',
        'sublocality_level_5' => 'setSublocalityLevel5',
        'administrative_area_level_1' => 'setAdministrativeAreaLevel1',
        'administrative_area_level_2' => 'setAdministrativeAreaLevel2',
        'administrative_area_level_3' => 'setAdministrativeAreaLevel3',
        'administrative_area_level_4' => 'setAdministrativeAreaLevel4',
        'administrative_area_level_5' => 'setAdministrativeAreaLevel5',
        'state_code' => 'setStateCode',
        'country' => 'setCountry',
        'country_code' => 'setCountryCode',
        'location' => 'setLocation',
        'place_id' => 'setPlaceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
        'formatted_address' => 'getFormattedAddress',
        'route' => 'getRoute',
        'street_number' => 'getStreetNumber',
        'postal_code' => 'getPostalCode',
        'locality' => 'getLocality',
        'sublocality' => 'getSublocality',
        'sublocality_level_1' => 'getSublocalityLevel1',
        'sublocality_level_2' => 'getSublocalityLevel2',
        'sublocality_level_3' => 'getSublocalityLevel3',
        'sublocality_level_4' => 'getSublocalityLevel4',
        'sublocality_level_5' => 'getSublocalityLevel5',
        'administrative_area_level_1' => 'getAdministrativeAreaLevel1',
        'administrative_area_level_2' => 'getAdministrativeAreaLevel2',
        'administrative_area_level_3' => 'getAdministrativeAreaLevel3',
        'administrative_area_level_4' => 'getAdministrativeAreaLevel4',
        'administrative_area_level_5' => 'getAdministrativeAreaLevel5',
        'state_code' => 'getStateCode',
        'country' => 'getCountry',
        'country_code' => 'getCountryCode',
        'location' => 'getLocation',
        'place_id' => 'getPlaceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language'] = $data['language'] ?? null;
        $this->container['formatted_address'] = $data['formatted_address'] ?? null;
        $this->container['route'] = $data['route'] ?? null;
        $this->container['street_number'] = $data['street_number'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['locality'] = $data['locality'] ?? null;
        $this->container['sublocality'] = $data['sublocality'] ?? null;
        $this->container['sublocality_level_1'] = $data['sublocality_level_1'] ?? null;
        $this->container['sublocality_level_2'] = $data['sublocality_level_2'] ?? null;
        $this->container['sublocality_level_3'] = $data['sublocality_level_3'] ?? null;
        $this->container['sublocality_level_4'] = $data['sublocality_level_4'] ?? null;
        $this->container['sublocality_level_5'] = $data['sublocality_level_5'] ?? null;
        $this->container['administrative_area_level_1'] = $data['administrative_area_level_1'] ?? null;
        $this->container['administrative_area_level_2'] = $data['administrative_area_level_2'] ?? null;
        $this->container['administrative_area_level_3'] = $data['administrative_area_level_3'] ?? null;
        $this->container['administrative_area_level_4'] = $data['administrative_area_level_4'] ?? null;
        $this->container['administrative_area_level_5'] = $data['administrative_area_level_5'] ?? null;
        $this->container['state_code'] = $data['state_code'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['place_id'] = $data['place_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['formatted_address'] === null) {
            $invalidProperties[] = "'formatted_address' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['place_id'] === null) {
            $invalidProperties[] = "'place_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The language of the localizable fields ot this geographical information set.<p>Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.</p><p>See also <a href=\"#isolanguage-codes\">in the appendix</a>.</p>
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets formatted_address
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formatted_address'];
    }

    /**
     * Sets formatted_address
     *
     * @param string $formatted_address The formatted address in the local format of the properties location.
     *
     * @return self
     */
    public function setFormattedAddress($formatted_address)
    {
        $this->container['formatted_address'] = $formatted_address;

        return $this;
    }

    /**
     * Gets route
     *
     * @return string|null
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param string|null $route The name of the route or street.
     *
     * @return self
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string|null $street_number The number of the street.
     *
     * @return self
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postal code of the location.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality A city or town.
     *
     * @return self
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets sublocality
     *
     * @return string|null
     */
    public function getSublocality()
    {
        return $this->container['sublocality'];
    }

    /**
     * Sets sublocality
     *
     * @param string|null $sublocality A smaller area within a locality.
     *
     * @return self
     */
    public function setSublocality($sublocality)
    {
        $this->container['sublocality'] = $sublocality;

        return $this;
    }

    /**
     * Gets sublocality_level_1
     *
     * @return string|null
     */
    public function getSublocalityLevel1()
    {
        return $this->container['sublocality_level_1'];
    }

    /**
     * Sets sublocality_level_1
     *
     * @param string|null $sublocality_level_1 A smaller area within a locality at level 1.
     *
     * @return self
     */
    public function setSublocalityLevel1($sublocality_level_1)
    {
        $this->container['sublocality_level_1'] = $sublocality_level_1;

        return $this;
    }

    /**
     * Gets sublocality_level_2
     *
     * @return string|null
     */
    public function getSublocalityLevel2()
    {
        return $this->container['sublocality_level_2'];
    }

    /**
     * Sets sublocality_level_2
     *
     * @param string|null $sublocality_level_2 A smaller area within a locality at level 2.
     *
     * @return self
     */
    public function setSublocalityLevel2($sublocality_level_2)
    {
        $this->container['sublocality_level_2'] = $sublocality_level_2;

        return $this;
    }

    /**
     * Gets sublocality_level_3
     *
     * @return string|null
     */
    public function getSublocalityLevel3()
    {
        return $this->container['sublocality_level_3'];
    }

    /**
     * Sets sublocality_level_3
     *
     * @param string|null $sublocality_level_3 A smaller area within a locality at level 3.
     *
     * @return self
     */
    public function setSublocalityLevel3($sublocality_level_3)
    {
        $this->container['sublocality_level_3'] = $sublocality_level_3;

        return $this;
    }

    /**
     * Gets sublocality_level_4
     *
     * @return string|null
     */
    public function getSublocalityLevel4()
    {
        return $this->container['sublocality_level_4'];
    }

    /**
     * Sets sublocality_level_4
     *
     * @param string|null $sublocality_level_4 A smaller area within a locality at level 4.
     *
     * @return self
     */
    public function setSublocalityLevel4($sublocality_level_4)
    {
        $this->container['sublocality_level_4'] = $sublocality_level_4;

        return $this;
    }

    /**
     * Gets sublocality_level_5
     *
     * @return string|null
     */
    public function getSublocalityLevel5()
    {
        return $this->container['sublocality_level_5'];
    }

    /**
     * Sets sublocality_level_5
     *
     * @param string|null $sublocality_level_5 A smaller area within a locality at level 5.
     *
     * @return self
     */
    public function setSublocalityLevel5($sublocality_level_5)
    {
        $this->container['sublocality_level_5'] = $sublocality_level_5;

        return $this;
    }

    /**
     * Gets administrative_area_level_1
     *
     * @return string|null
     */
    public function getAdministrativeAreaLevel1()
    {
        return $this->container['administrative_area_level_1'];
    }

    /**
     * Sets administrative_area_level_1
     *
     * @param string|null $administrative_area_level_1 A level 1 administrative area, such as a state or province.
     *
     * @return self
     */
    public function setAdministrativeAreaLevel1($administrative_area_level_1)
    {
        $this->container['administrative_area_level_1'] = $administrative_area_level_1;

        return $this;
    }

    /**
     * Gets administrative_area_level_2
     *
     * @return string|null
     */
    public function getAdministrativeAreaLevel2()
    {
        return $this->container['administrative_area_level_2'];
    }

    /**
     * Sets administrative_area_level_2
     *
     * @param string|null $administrative_area_level_2 A level 2 administrative area.
     *
     * @return self
     */
    public function setAdministrativeAreaLevel2($administrative_area_level_2)
    {
        $this->container['administrative_area_level_2'] = $administrative_area_level_2;

        return $this;
    }

    /**
     * Gets administrative_area_level_3
     *
     * @return string|null
     */
    public function getAdministrativeAreaLevel3()
    {
        return $this->container['administrative_area_level_3'];
    }

    /**
     * Sets administrative_area_level_3
     *
     * @param string|null $administrative_area_level_3 A level 3 administrative area
     *
     * @return self
     */
    public function setAdministrativeAreaLevel3($administrative_area_level_3)
    {
        $this->container['administrative_area_level_3'] = $administrative_area_level_3;

        return $this;
    }

    /**
     * Gets administrative_area_level_4
     *
     * @return string|null
     */
    public function getAdministrativeAreaLevel4()
    {
        return $this->container['administrative_area_level_4'];
    }

    /**
     * Sets administrative_area_level_4
     *
     * @param string|null $administrative_area_level_4 A level 4 administrative area.
     *
     * @return self
     */
    public function setAdministrativeAreaLevel4($administrative_area_level_4)
    {
        $this->container['administrative_area_level_4'] = $administrative_area_level_4;

        return $this;
    }

    /**
     * Gets administrative_area_level_5
     *
     * @return string|null
     */
    public function getAdministrativeAreaLevel5()
    {
        return $this->container['administrative_area_level_5'];
    }

    /**
     * Sets administrative_area_level_5
     *
     * @param string|null $administrative_area_level_5 A level 5 administrative area
     *
     * @return self
     */
    public function setAdministrativeAreaLevel5($administrative_area_level_5)
    {
        $this->container['administrative_area_level_5'] = $administrative_area_level_5;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code The state or province code for the administrative area.
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country of this geographical information set.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The country code for the country.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \com.lodgea\com.lodgea.model\InlineResponse2001GeoLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \com.lodgea\com.lodgea.model\InlineResponse2001GeoLocation $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets place_id
     *
     * @return string
     */
    public function getPlaceId()
    {
        return $this->container['place_id'];
    }

    /**
     * Sets place_id
     *
     * @param string $place_id Uniquely identifies a place in our database.
     *
     * @return self
     */
    public function setPlaceId($place_id)
    {
        $this->container['place_id'] = $place_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


